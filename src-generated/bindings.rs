/* automatically generated by rust-bindgen 0.60.1 */

use libc::{FILE, size_t};

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const BITWUZLA_BV_BASE_BIN: BitwuzlaBVBase = 0;
pub const BITWUZLA_BV_BASE_DEC: BitwuzlaBVBase = 1;
pub const BITWUZLA_BV_BASE_HEX: BitwuzlaBVBase = 2;
pub type BitwuzlaBVBase = ::std::os::raw::c_uint;
pub const BITWUZLA_OPT_ENGINE: BitwuzlaOption = 0;
pub const BITWUZLA_OPT_EXIT_CODES: BitwuzlaOption = 1;
pub const BITWUZLA_OPT_INPUT_FORMAT: BitwuzlaOption = 2;
pub const BITWUZLA_OPT_INCREMENTAL: BitwuzlaOption = 3;
pub const BITWUZLA_OPT_LOGLEVEL: BitwuzlaOption = 4;
pub const BITWUZLA_OPT_OUTPUT_FORMAT: BitwuzlaOption = 5;
pub const BITWUZLA_OPT_OUTPUT_NUMBER_FORMAT: BitwuzlaOption = 6;
pub const BITWUZLA_OPT_PRETTY_PRINT: BitwuzlaOption = 7;
pub const BITWUZLA_OPT_PRINT_DIMACS: BitwuzlaOption = 8;
pub const BITWUZLA_OPT_PRODUCE_MODELS: BitwuzlaOption = 9;
pub const BITWUZLA_OPT_PRODUCE_UNSAT_CORES: BitwuzlaOption = 10;
pub const BITWUZLA_OPT_SAT_ENGINE: BitwuzlaOption = 11;
pub const BITWUZLA_OPT_SEED: BitwuzlaOption = 12;
pub const BITWUZLA_OPT_VERBOSITY: BitwuzlaOption = 13;
pub const BITWUZLA_OPT_PP_ACKERMANN: BitwuzlaOption = 14;
pub const BITWUZLA_OPT_PP_BETA_REDUCE: BitwuzlaOption = 15;
pub const BITWUZLA_OPT_PP_ELIMINATE_EXTRACTS: BitwuzlaOption = 16;
pub const BITWUZLA_OPT_PP_ELIMINATE_ITES: BitwuzlaOption = 17;
pub const BITWUZLA_OPT_PP_EXTRACT_LAMBDAS: BitwuzlaOption = 18;
pub const BITWUZLA_OPT_PP_MERGE_LAMBDAS: BitwuzlaOption = 19;
pub const BITWUZLA_OPT_PP_NONDESTR_SUBST: BitwuzlaOption = 20;
pub const BITWUZLA_OPT_PP_NORMALIZE_ADD: BitwuzlaOption = 21;
pub const BITWUZLA_OPT_PP_SKELETON_PREPROC: BitwuzlaOption = 22;
pub const BITWUZLA_OPT_PP_UNCONSTRAINED_OPTIMIZATION: BitwuzlaOption = 23;
pub const BITWUZLA_OPT_PP_VAR_SUBST: BitwuzlaOption = 24;
pub const BITWUZLA_OPT_RW_EXTRACT_ARITH: BitwuzlaOption = 25;
pub const BITWUZLA_OPT_RW_LEVEL: BitwuzlaOption = 26;
pub const BITWUZLA_OPT_RW_NORMALIZE: BitwuzlaOption = 27;
pub const BITWUZLA_OPT_RW_NORMALIZE_ADD: BitwuzlaOption = 28;
pub const BITWUZLA_OPT_RW_SIMPLIFY_CONSTRAINTS: BitwuzlaOption = 29;
pub const BITWUZLA_OPT_RW_SLT: BitwuzlaOption = 30;
pub const BITWUZLA_OPT_RW_SORT_AIG: BitwuzlaOption = 31;
pub const BITWUZLA_OPT_RW_SORT_AIGVEC: BitwuzlaOption = 32;
pub const BITWUZLA_OPT_RW_SORT_EXP: BitwuzlaOption = 33;
pub const BITWUZLA_OPT_FUN_DUAL_PROP: BitwuzlaOption = 34;
pub const BITWUZLA_OPT_FUN_DUAL_PROP_QSORT: BitwuzlaOption = 35;
pub const BITWUZLA_OPT_FUN_EAGER_LEMMAS: BitwuzlaOption = 36;
pub const BITWUZLA_OPT_FUN_LAZY_SYNTHESIZE: BitwuzlaOption = 37;
pub const BITWUZLA_OPT_FUN_JUST: BitwuzlaOption = 38;
pub const BITWUZLA_OPT_FUN_JUST_HEURISTIC: BitwuzlaOption = 39;
pub const BITWUZLA_OPT_FUN_PREPROP: BitwuzlaOption = 40;
pub const BITWUZLA_OPT_FUN_PRESLS: BitwuzlaOption = 41;
pub const BITWUZLA_OPT_FUN_STORE_LAMBDAS: BitwuzlaOption = 42;
pub const BITWUZLA_OPT_SLS_JUST: BitwuzlaOption = 43;
pub const BITWUZLA_OPT_SLS_MOVE_GW: BitwuzlaOption = 44;
pub const BITWUZLA_OPT_SLS_MOVE_INC_MOVE_TEST: BitwuzlaOption = 45;
pub const BITWUZLA_OPT_SLS_MOVE_PROP: BitwuzlaOption = 46;
pub const BITWUZLA_OPT_SLS_MOVE_PROP_FORCE_RW: BitwuzlaOption = 47;
pub const BITWUZLA_OPT_SLS_MOVE_PROP_NPROPS: BitwuzlaOption = 48;
pub const BITWUZLA_OPT_SLS_MOVE_PROP_NSLSS: BitwuzlaOption = 49;
pub const BITWUZLA_OPT_SLS_MOVE_RAND_ALL: BitwuzlaOption = 50;
pub const BITWUZLA_OPT_SLS_MOVE_RAND_RANGE: BitwuzlaOption = 51;
pub const BITWUZLA_OPT_SLS_MOVE_RAND_WALK: BitwuzlaOption = 52;
pub const BITWUZLA_OPT_SLS_MOVE_RANGE: BitwuzlaOption = 53;
pub const BITWUZLA_OPT_SLS_MOVE_SEGMENT: BitwuzlaOption = 54;
pub const BITWUZLA_OPT_SLS_PROB_MOVE_RAND_WALK: BitwuzlaOption = 55;
pub const BITWUZLA_OPT_SLS_NFLIPS: BitwuzlaOption = 56;
pub const BITWUZLA_OPT_SLS_STRATEGY: BitwuzlaOption = 57;
pub const BITWUZLA_OPT_SLS_USE_RESTARTS: BitwuzlaOption = 58;
pub const BITWUZLA_OPT_SLS_USE_BANDIT: BitwuzlaOption = 59;
pub const BITWUZLA_OPT_PROP_ASHR: BitwuzlaOption = 60;
pub const BITWUZLA_OPT_PROP_CONST_BITS: BitwuzlaOption = 61;
pub const BITWUZLA_OPT_PROP_CONST_DOMAINS: BitwuzlaOption = 62;
pub const BITWUZLA_OPT_PROP_ENTAILED: BitwuzlaOption = 63;
pub const BITWUZLA_OPT_PROP_FLIP_COND_CONST_DELTA: BitwuzlaOption = 64;
pub const BITWUZLA_OPT_PROP_FLIP_COND_CONST_NPATHSEL: BitwuzlaOption = 65;
pub const BITWUZLA_OPT_PROP_INFER_INEQ_BOUNDS: BitwuzlaOption = 66;
pub const BITWUZLA_OPT_PROP_NO_MOVE_ON_CONFLICT: BitwuzlaOption = 67;
pub const BITWUZLA_OPT_PROP_NPROPS: BitwuzlaOption = 68;
pub const BITWUZLA_OPT_PROP_NUPDATES: BitwuzlaOption = 69;
pub const BITWUZLA_OPT_PROP_PATH_SEL: BitwuzlaOption = 70;
pub const BITWUZLA_OPT_PROP_PROB_FALLBACK_RANDOM_VALUE: BitwuzlaOption = 71;
pub const BITWUZLA_OPT_PROP_PROB_AND_FLIP: BitwuzlaOption = 72;
pub const BITWUZLA_OPT_PROP_PROB_EQ_FLIP: BitwuzlaOption = 73;
pub const BITWUZLA_OPT_PROP_PROB_FLIP_COND: BitwuzlaOption = 74;
pub const BITWUZLA_OPT_PROP_PROB_FLIP_COND_CONST: BitwuzlaOption = 75;
pub const BITWUZLA_OPT_PROP_PROB_RANDOM_INPUT: BitwuzlaOption = 76;
pub const BITWUZLA_OPT_PROP_PROB_SLICE_FLIP: BitwuzlaOption = 77;
pub const BITWUZLA_OPT_PROP_PROB_SLICE_KEEP_DC: BitwuzlaOption = 78;
pub const BITWUZLA_OPT_PROP_PROB_USE_INV_VALUE: BitwuzlaOption = 79;
pub const BITWUZLA_OPT_PROP_USE_BANDIT: BitwuzlaOption = 80;
pub const BITWUZLA_OPT_PROP_USE_INV_LT_CONCAT: BitwuzlaOption = 81;
pub const BITWUZLA_OPT_PROP_USE_RESTARTS: BitwuzlaOption = 82;
pub const BITWUZLA_OPT_PROP_SEXT: BitwuzlaOption = 83;
pub const BITWUZLA_OPT_PROP_SKIP_NO_PROGRESS: BitwuzlaOption = 84;
pub const BITWUZLA_OPT_PROP_XOR: BitwuzlaOption = 85;
pub const BITWUZLA_OPT_AIGPROP_NPROPS: BitwuzlaOption = 86;
pub const BITWUZLA_OPT_AIGPROP_USE_BANDIT: BitwuzlaOption = 87;
pub const BITWUZLA_OPT_AIGPROP_USE_RESTARTS: BitwuzlaOption = 88;
pub const BITWUZLA_OPT_QUANT_CER: BitwuzlaOption = 89;
pub const BITWUZLA_OPT_QUANT_DER: BitwuzlaOption = 90;
pub const BITWUZLA_OPT_QUANT_DUAL_SOLVER: BitwuzlaOption = 91;
pub const BITWUZLA_OPT_QUANT_MINISCOPE: BitwuzlaOption = 92;
pub const BITWUZLA_OPT_QUANT_SYNTH: BitwuzlaOption = 93;
pub const BITWUZLA_OPT_QUANT_FIXSYNTH: BitwuzlaOption = 94;
pub const BITWUZLA_OPT_QUANT_SYNTH_ITE_COMPLETE: BitwuzlaOption = 95;
pub const BITWUZLA_OPT_QUANT_SYNTH_LIMIT: BitwuzlaOption = 96;
pub const BITWUZLA_OPT_QUANT_SYNTH_QI: BitwuzlaOption = 97;
pub const BITWUZLA_OPT_CHECK_MODEL: BitwuzlaOption = 98;
pub const BITWUZLA_OPT_CHECK_UNCONSTRAINED: BitwuzlaOption = 99;
pub const BITWUZLA_OPT_CHECK_UNSAT_ASSUMPTIONS: BitwuzlaOption = 100;
pub const BITWUZLA_OPT_DECLSORT_BV_WIDTH: BitwuzlaOption = 101;
pub const BITWUZLA_OPT_LS_SHARE_SAT: BitwuzlaOption = 102;
pub const BITWUZLA_OPT_PARSE_INTERACTIVE: BitwuzlaOption = 103;
pub const BITWUZLA_OPT_SAT_ENGINE_CADICAL_FREEZE: BitwuzlaOption = 104;
pub const BITWUZLA_OPT_SAT_ENGINE_LGL_FORK: BitwuzlaOption = 105;
pub const BITWUZLA_OPT_SAT_ENGINE_N_THREADS: BitwuzlaOption = 106;
pub const BITWUZLA_OPT_SMT_COMP_MODE: BitwuzlaOption = 107;
pub const BITWUZLA_OPT_NUM_OPTS: BitwuzlaOption = 108;
pub type BitwuzlaOption = ::std::os::raw::c_uint;
#[repr(C)]
pub struct BitwuzlaOptionInfo {
    pub opt: BitwuzlaOption,
    pub shrt: *const ::std::os::raw::c_char,
    pub lng: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub is_numeric: bool,
    pub __bindgen_anon_1: BitwuzlaOptionInfo__bindgen_ty_1,
}
#[repr(C)]
pub struct BitwuzlaOptionInfo__bindgen_ty_1 {
    pub numeric: __BindgenUnionField<BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1>,
    pub string: __BindgenUnionField<BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1 {
    pub cur_val: u32,
    pub def_val: u32,
    pub min_val: u32,
    pub max_val: u32,
}
#[test]
fn bindgen_test_layout_BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_cur_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cur_val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cur_val)
            )
        );
    }
    test_field_cur_val();
    fn test_field_def_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).def_val) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(def_val)
            )
        );
    }
    test_field_def_val();
    fn test_field_min_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_val) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(min_val)
            )
        );
    }
    test_field_min_val();
    fn test_field_max_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_val) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(max_val)
            )
        );
    }
    test_field_max_val();
}
#[repr(C)]
pub struct BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2 {
    pub cur_val: *const ::std::os::raw::c_char,
    pub def_val: *const ::std::os::raw::c_char,
    pub num_values: size_t,
    pub values: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_cur_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cur_val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(cur_val)
            )
        );
    }
    test_field_cur_val();
    fn test_field_def_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).def_val) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(def_val)
            )
        );
    }
    test_field_def_val();
    fn test_field_num_values() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_values) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(num_values)
            )
        );
    }
    test_field_num_values();
    fn test_field_values() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(values)
            )
        );
    }
    test_field_values();
}
#[test]
fn bindgen_test_layout_BitwuzlaOptionInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<BitwuzlaOptionInfo__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(BitwuzlaOptionInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<BitwuzlaOptionInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BitwuzlaOptionInfo__bindgen_ty_1)
        )
    );
    fn test_field_numeric() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numeric) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1),
                "::",
                stringify!(numeric)
            )
        );
    }
    test_field_numeric();
    fn test_field_string() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo__bindgen_ty_1),
                "::",
                stringify!(string)
            )
        );
    }
    test_field_string();
}
#[test]
fn bindgen_test_layout_BitwuzlaOptionInfo() {
    assert_eq!(
        ::std::mem::size_of::<BitwuzlaOptionInfo>(),
        72usize,
        concat!("Size of: ", stringify!(BitwuzlaOptionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BitwuzlaOptionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(BitwuzlaOptionInfo))
    );
    fn test_field_opt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo),
                "::",
                stringify!(opt)
            )
        );
    }
    test_field_opt();
    fn test_field_shrt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shrt) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo),
                "::",
                stringify!(shrt)
            )
        );
    }
    test_field_shrt();
    fn test_field_lng() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lng) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo),
                "::",
                stringify!(lng)
            )
        );
    }
    test_field_lng();
    fn test_field_desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo),
                "::",
                stringify!(desc)
            )
        );
    }
    test_field_desc();
    fn test_field_is_numeric() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<BitwuzlaOptionInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_numeric) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(BitwuzlaOptionInfo),
                "::",
                stringify!(is_numeric)
            )
        );
    }
    test_field_is_numeric();
}
pub const BITWUZLA_KIND_CONST: BitwuzlaKind = 0;
pub const BITWUZLA_KIND_CONST_ARRAY: BitwuzlaKind = 1;
pub const BITWUZLA_KIND_VAL: BitwuzlaKind = 2;
pub const BITWUZLA_KIND_VAR: BitwuzlaKind = 3;
pub const BITWUZLA_KIND_AND: BitwuzlaKind = 4;
pub const BITWUZLA_KIND_APPLY: BitwuzlaKind = 5;
pub const BITWUZLA_KIND_ARRAY_SELECT: BitwuzlaKind = 6;
pub const BITWUZLA_KIND_ARRAY_STORE: BitwuzlaKind = 7;
pub const BITWUZLA_KIND_BV_ADD: BitwuzlaKind = 8;
pub const BITWUZLA_KIND_BV_AND: BitwuzlaKind = 9;
pub const BITWUZLA_KIND_BV_ASHR: BitwuzlaKind = 10;
pub const BITWUZLA_KIND_BV_COMP: BitwuzlaKind = 11;
pub const BITWUZLA_KIND_BV_CONCAT: BitwuzlaKind = 12;
pub const BITWUZLA_KIND_BV_DEC: BitwuzlaKind = 13;
pub const BITWUZLA_KIND_BV_INC: BitwuzlaKind = 14;
pub const BITWUZLA_KIND_BV_MUL: BitwuzlaKind = 15;
pub const BITWUZLA_KIND_BV_NAND: BitwuzlaKind = 16;
pub const BITWUZLA_KIND_BV_NEG: BitwuzlaKind = 17;
pub const BITWUZLA_KIND_BV_NOR: BitwuzlaKind = 18;
pub const BITWUZLA_KIND_BV_NOT: BitwuzlaKind = 19;
pub const BITWUZLA_KIND_BV_OR: BitwuzlaKind = 20;
pub const BITWUZLA_KIND_BV_REDAND: BitwuzlaKind = 21;
pub const BITWUZLA_KIND_BV_REDOR: BitwuzlaKind = 22;
pub const BITWUZLA_KIND_BV_REDXOR: BitwuzlaKind = 23;
pub const BITWUZLA_KIND_BV_ROL: BitwuzlaKind = 24;
pub const BITWUZLA_KIND_BV_ROR: BitwuzlaKind = 25;
pub const BITWUZLA_KIND_BV_SADD_OVERFLOW: BitwuzlaKind = 26;
pub const BITWUZLA_KIND_BV_SDIV_OVERFLOW: BitwuzlaKind = 27;
pub const BITWUZLA_KIND_BV_SDIV: BitwuzlaKind = 28;
pub const BITWUZLA_KIND_BV_SGE: BitwuzlaKind = 29;
pub const BITWUZLA_KIND_BV_SGT: BitwuzlaKind = 30;
pub const BITWUZLA_KIND_BV_SHL: BitwuzlaKind = 31;
pub const BITWUZLA_KIND_BV_SHR: BitwuzlaKind = 32;
pub const BITWUZLA_KIND_BV_SLE: BitwuzlaKind = 33;
pub const BITWUZLA_KIND_BV_SLT: BitwuzlaKind = 34;
pub const BITWUZLA_KIND_BV_SMOD: BitwuzlaKind = 35;
pub const BITWUZLA_KIND_BV_SMUL_OVERFLOW: BitwuzlaKind = 36;
pub const BITWUZLA_KIND_BV_SREM: BitwuzlaKind = 37;
pub const BITWUZLA_KIND_BV_SSUB_OVERFLOW: BitwuzlaKind = 38;
pub const BITWUZLA_KIND_BV_SUB: BitwuzlaKind = 39;
pub const BITWUZLA_KIND_BV_UADD_OVERFLOW: BitwuzlaKind = 40;
pub const BITWUZLA_KIND_BV_UDIV: BitwuzlaKind = 41;
pub const BITWUZLA_KIND_BV_UGE: BitwuzlaKind = 42;
pub const BITWUZLA_KIND_BV_UGT: BitwuzlaKind = 43;
pub const BITWUZLA_KIND_BV_ULE: BitwuzlaKind = 44;
pub const BITWUZLA_KIND_BV_ULT: BitwuzlaKind = 45;
pub const BITWUZLA_KIND_BV_UMUL_OVERFLOW: BitwuzlaKind = 46;
pub const BITWUZLA_KIND_BV_UREM: BitwuzlaKind = 47;
pub const BITWUZLA_KIND_BV_USUB_OVERFLOW: BitwuzlaKind = 48;
pub const BITWUZLA_KIND_BV_XNOR: BitwuzlaKind = 49;
pub const BITWUZLA_KIND_BV_XOR: BitwuzlaKind = 50;
pub const BITWUZLA_KIND_DISTINCT: BitwuzlaKind = 51;
pub const BITWUZLA_KIND_EQUAL: BitwuzlaKind = 52;
pub const BITWUZLA_KIND_EXISTS: BitwuzlaKind = 53;
pub const BITWUZLA_KIND_FORALL: BitwuzlaKind = 54;
pub const BITWUZLA_KIND_FP_ABS: BitwuzlaKind = 55;
pub const BITWUZLA_KIND_FP_ADD: BitwuzlaKind = 56;
pub const BITWUZLA_KIND_FP_DIV: BitwuzlaKind = 57;
pub const BITWUZLA_KIND_FP_EQ: BitwuzlaKind = 58;
pub const BITWUZLA_KIND_FP_FMA: BitwuzlaKind = 59;
pub const BITWUZLA_KIND_FP_FP: BitwuzlaKind = 60;
pub const BITWUZLA_KIND_FP_GEQ: BitwuzlaKind = 61;
pub const BITWUZLA_KIND_FP_GT: BitwuzlaKind = 62;
pub const BITWUZLA_KIND_FP_IS_INF: BitwuzlaKind = 63;
pub const BITWUZLA_KIND_FP_IS_NAN: BitwuzlaKind = 64;
pub const BITWUZLA_KIND_FP_IS_NEG: BitwuzlaKind = 65;
pub const BITWUZLA_KIND_FP_IS_NORMAL: BitwuzlaKind = 66;
pub const BITWUZLA_KIND_FP_IS_POS: BitwuzlaKind = 67;
pub const BITWUZLA_KIND_FP_IS_SUBNORMAL: BitwuzlaKind = 68;
pub const BITWUZLA_KIND_FP_IS_ZERO: BitwuzlaKind = 69;
pub const BITWUZLA_KIND_FP_LEQ: BitwuzlaKind = 70;
pub const BITWUZLA_KIND_FP_LT: BitwuzlaKind = 71;
pub const BITWUZLA_KIND_FP_MAX: BitwuzlaKind = 72;
pub const BITWUZLA_KIND_FP_MIN: BitwuzlaKind = 73;
pub const BITWUZLA_KIND_FP_MUL: BitwuzlaKind = 74;
pub const BITWUZLA_KIND_FP_NEG: BitwuzlaKind = 75;
pub const BITWUZLA_KIND_FP_REM: BitwuzlaKind = 76;
pub const BITWUZLA_KIND_FP_RTI: BitwuzlaKind = 77;
pub const BITWUZLA_KIND_FP_SQRT: BitwuzlaKind = 78;
pub const BITWUZLA_KIND_FP_SUB: BitwuzlaKind = 79;
pub const BITWUZLA_KIND_IFF: BitwuzlaKind = 80;
pub const BITWUZLA_KIND_IMPLIES: BitwuzlaKind = 81;
pub const BITWUZLA_KIND_ITE: BitwuzlaKind = 82;
pub const BITWUZLA_KIND_LAMBDA: BitwuzlaKind = 83;
pub const BITWUZLA_KIND_NOT: BitwuzlaKind = 84;
pub const BITWUZLA_KIND_OR: BitwuzlaKind = 85;
pub const BITWUZLA_KIND_XOR: BitwuzlaKind = 86;
pub const BITWUZLA_KIND_BV_EXTRACT: BitwuzlaKind = 87;
pub const BITWUZLA_KIND_BV_REPEAT: BitwuzlaKind = 88;
pub const BITWUZLA_KIND_BV_ROLI: BitwuzlaKind = 89;
pub const BITWUZLA_KIND_BV_RORI: BitwuzlaKind = 90;
pub const BITWUZLA_KIND_BV_SIGN_EXTEND: BitwuzlaKind = 91;
pub const BITWUZLA_KIND_BV_ZERO_EXTEND: BitwuzlaKind = 92;
pub const BITWUZLA_KIND_FP_TO_FP_FROM_BV: BitwuzlaKind = 93;
pub const BITWUZLA_KIND_FP_TO_FP_FROM_FP: BitwuzlaKind = 94;
pub const BITWUZLA_KIND_FP_TO_FP_FROM_SBV: BitwuzlaKind = 95;
pub const BITWUZLA_KIND_FP_TO_FP_FROM_UBV: BitwuzlaKind = 96;
pub const BITWUZLA_KIND_FP_TO_SBV: BitwuzlaKind = 97;
pub const BITWUZLA_KIND_FP_TO_UBV: BitwuzlaKind = 98;
pub const BITWUZLA_NUM_KINDS: BitwuzlaKind = 99;
pub type BitwuzlaKind = ::std::os::raw::c_uint;
extern "C" {
    pub fn bitwuzla_kind_to_string(kind: BitwuzlaKind) -> *const ::std::os::raw::c_char;
}
pub const BITWUZLA_SAT: BitwuzlaResult = 10;
pub const BITWUZLA_UNSAT: BitwuzlaResult = 20;
pub const BITWUZLA_UNKNOWN: BitwuzlaResult = 0;
pub type BitwuzlaResult = ::std::os::raw::c_uint;
extern "C" {
    pub fn bitwuzla_result_to_string(result: BitwuzlaResult) -> *const ::std::os::raw::c_char;
}
pub const BITWUZLA_RM_RNE: BitwuzlaRoundingMode = 0;
pub const BITWUZLA_RM_RNA: BitwuzlaRoundingMode = 1;
pub const BITWUZLA_RM_RTN: BitwuzlaRoundingMode = 2;
pub const BITWUZLA_RM_RTP: BitwuzlaRoundingMode = 3;
pub const BITWUZLA_RM_RTZ: BitwuzlaRoundingMode = 4;
pub const BITWUZLA_RM_MAX: BitwuzlaRoundingMode = 5;
pub type BitwuzlaRoundingMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn bitwuzla_rm_to_string(rm: BitwuzlaRoundingMode) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bitwuzla {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitwuzlaTerm {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitwuzlaSort {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bitwuzla_new() -> *mut Bitwuzla;
}
extern "C" {
    pub fn bitwuzla_delete(bitwuzla: *mut Bitwuzla);
}
extern "C" {
    pub fn bitwuzla_reset(bitwuzla: *mut Bitwuzla);
}
extern "C" {
    pub fn bitwuzla_copyright(bitwuzla: *mut Bitwuzla) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_version(bitwuzla: *mut Bitwuzla) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_git_id(bitwuzla: *mut Bitwuzla) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_terminate(bitwuzla: *mut Bitwuzla) -> bool;
}
extern "C" {
    pub fn bitwuzla_set_termination_callback(
        bitwuzla: *mut Bitwuzla,
        fun: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> i32>,
        state: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bitwuzla_get_termination_callback_state(
        bitwuzla: *mut Bitwuzla,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn bitwuzla_set_abort_callback(
        fun: ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>,
    );
}
extern "C" {
    pub fn bitwuzla_set_option(bitwuzla: *mut Bitwuzla, option: BitwuzlaOption, val: u32);
}
extern "C" {
    pub fn bitwuzla_set_option_str(
        bitwuzla: *mut Bitwuzla,
        option: BitwuzlaOption,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn bitwuzla_get_option(bitwuzla: *mut Bitwuzla, option: BitwuzlaOption) -> u32;
}
extern "C" {
    pub fn bitwuzla_get_option_str(
        bitwuzla: *mut Bitwuzla,
        option: BitwuzlaOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_get_option_info(
        bitwuzla: *mut Bitwuzla,
        option: BitwuzlaOption,
        info: *mut BitwuzlaOptionInfo,
    );
}
extern "C" {
    pub fn bitwuzla_mk_array_sort(
        bitwuzla: *mut Bitwuzla,
        index: *const BitwuzlaSort,
        element: *const BitwuzlaSort,
    ) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_mk_bool_sort(bitwuzla: *mut Bitwuzla) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_mk_bv_sort(bitwuzla: *mut Bitwuzla, size: u32) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_mk_fp_sort(
        bitwuzla: *mut Bitwuzla,
        exp_size: u32,
        sig_size: u32,
    ) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_mk_fun_sort(
        bitwuzla: *mut Bitwuzla,
        arity: u32,
        domain: *mut *const BitwuzlaSort,
        codomain: *const BitwuzlaSort,
    ) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_mk_rm_sort(bitwuzla: *mut Bitwuzla) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_mk_true(bitwuzla: *mut Bitwuzla) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_false(bitwuzla: *mut Bitwuzla) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_zero(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_one(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_ones(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_min_signed(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_max_signed(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_pos_zero(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_neg_zero(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_pos_inf(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_neg_inf(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_nan(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_value(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        value: *const ::std::os::raw::c_char,
        base: BitwuzlaBVBase,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_bv_value_uint64(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        value: u64,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_value(
        bitwuzla: *mut Bitwuzla,
        bv_sign: *const BitwuzlaTerm,
        bv_exponent: *const BitwuzlaTerm,
        bv_significand: *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_value_from_real(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        rm: *const BitwuzlaTerm,
        real: *const ::std::os::raw::c_char,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_fp_value_from_rational(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        rm: *const BitwuzlaTerm,
        num: *const ::std::os::raw::c_char,
        den: *const ::std::os::raw::c_char,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_rm_value(
        bitwuzla: *mut Bitwuzla,
        rm: BitwuzlaRoundingMode,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term1(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg: *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term2(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg0: *const BitwuzlaTerm,
        arg1: *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term3(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg0: *const BitwuzlaTerm,
        arg1: *const BitwuzlaTerm,
        arg2: *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        argc: u32,
        args: *mut *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term1_indexed1(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg: *const BitwuzlaTerm,
        idx: u32,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term1_indexed2(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg: *const BitwuzlaTerm,
        idx0: u32,
        idx1: u32,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term2_indexed1(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg0: *const BitwuzlaTerm,
        arg1: *const BitwuzlaTerm,
        idx: u32,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term2_indexed2(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        arg0: *const BitwuzlaTerm,
        arg1: *const BitwuzlaTerm,
        idx0: u32,
        idx1: u32,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_term_indexed(
        bitwuzla: *mut Bitwuzla,
        kind: BitwuzlaKind,
        argc: u32,
        args: *mut *const BitwuzlaTerm,
        idxc: u32,
        idxs: *const u32,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_const(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        symbol: *const ::std::os::raw::c_char,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_const_array(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        value: *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_mk_var(
        bitwuzla: *mut Bitwuzla,
        sort: *const BitwuzlaSort,
        symbol: *const ::std::os::raw::c_char,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_push(bitwuzla: *mut Bitwuzla, nlevels: u32);
}
extern "C" {
    pub fn bitwuzla_pop(bitwuzla: *mut Bitwuzla, nlevels: u32);
}
extern "C" {
    pub fn bitwuzla_assert(bitwuzla: *mut Bitwuzla, term: *const BitwuzlaTerm);
}
extern "C" {
    pub fn bitwuzla_assume(bitwuzla: *mut Bitwuzla, term: *const BitwuzlaTerm);
}
extern "C" {
    pub fn bitwuzla_is_unsat_assumption(bitwuzla: *mut Bitwuzla, term: *const BitwuzlaTerm)
        -> bool;
}
extern "C" {
    pub fn bitwuzla_get_unsat_assumptions(
        bitwuzla: *mut Bitwuzla,
        size: *mut size_t,
    ) -> *mut *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_get_unsat_core(
        bitwuzla: *mut Bitwuzla,
        size: *mut size_t,
    ) -> *mut *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_fixate_assumptions(bitwuzla: *mut Bitwuzla);
}
extern "C" {
    pub fn bitwuzla_reset_assumptions(bitwuzla: *mut Bitwuzla);
}
extern "C" {
    pub fn bitwuzla_simplify(bitwuzla: *mut Bitwuzla) -> BitwuzlaResult;
}
extern "C" {
    pub fn bitwuzla_check_sat(bitwuzla: *mut Bitwuzla) -> BitwuzlaResult;
}
extern "C" {
    pub fn bitwuzla_get_value(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_get_bv_value(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_get_fp_value(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
        sign: *mut *const ::std::os::raw::c_char,
        exponent: *mut *const ::std::os::raw::c_char,
        significand: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn bitwuzla_get_rm_value(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_get_array_value(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
        indices: *mut *mut *const BitwuzlaTerm,
        values: *mut *mut *const BitwuzlaTerm,
        size: *mut size_t,
        default_value: *mut *const BitwuzlaTerm,
    );
}
extern "C" {
    pub fn bitwuzla_get_fun_value(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
        args: *mut *mut *mut *const BitwuzlaTerm,
        arity: *mut size_t,
        values: *mut *mut *const BitwuzlaTerm,
        size: *mut size_t,
    );
}
extern "C" {
    pub fn bitwuzla_print_model(
        bitwuzla: *mut Bitwuzla,
        format: *const ::std::os::raw::c_char,
        file: *mut FILE,
    );
}
extern "C" {
    pub fn bitwuzla_dump_formula(
        bitwuzla: *mut Bitwuzla,
        format: *const ::std::os::raw::c_char,
        file: *mut FILE,
    );
}
extern "C" {
    pub fn bitwuzla_parse(
        bitwuzla: *mut Bitwuzla,
        infile: *mut FILE,
        infile_name: *const ::std::os::raw::c_char,
        outfile: *mut FILE,
        error_msg: *mut *mut ::std::os::raw::c_char,
        parsed_status: *mut BitwuzlaResult,
        parsed_smt2: *mut bool,
    ) -> BitwuzlaResult;
}
extern "C" {
    pub fn bitwuzla_parse_format(
        bitwuzla: *mut Bitwuzla,
        format: *const ::std::os::raw::c_char,
        infile: *mut FILE,
        infile_name: *const ::std::os::raw::c_char,
        outfile: *mut FILE,
        error_msg: *mut *mut ::std::os::raw::c_char,
        parsed_status: *mut BitwuzlaResult,
    ) -> BitwuzlaResult;
}
extern "C" {
    pub fn bitwuzla_substitute_term(
        bitwuzla: *mut Bitwuzla,
        term: *const BitwuzlaTerm,
        map_size: size_t,
        map_keys: *mut *const BitwuzlaTerm,
        map_values: *mut *const BitwuzlaTerm,
    ) -> *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_substitute_terms(
        bitwuzla: *mut Bitwuzla,
        terms_size: size_t,
        terms: *mut *const BitwuzlaTerm,
        map_size: size_t,
        map_keys: *mut *const BitwuzlaTerm,
        map_values: *mut *const BitwuzlaTerm,
    );
}
extern "C" {
    pub fn bitwuzla_sort_hash(sort: *const BitwuzlaSort) -> size_t;
}
extern "C" {
    pub fn bitwuzla_sort_bv_get_size(sort: *const BitwuzlaSort) -> u32;
}
extern "C" {
    pub fn bitwuzla_sort_fp_get_exp_size(sort: *const BitwuzlaSort) -> u32;
}
extern "C" {
    pub fn bitwuzla_sort_fp_get_sig_size(sort: *const BitwuzlaSort) -> u32;
}
extern "C" {
    pub fn bitwuzla_sort_array_get_index(sort: *const BitwuzlaSort) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_sort_array_get_element(sort: *const BitwuzlaSort) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_sort_fun_get_domain_sorts(
        sort: *const BitwuzlaSort,
        size: *mut size_t,
    ) -> *mut *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_sort_fun_get_codomain(sort: *const BitwuzlaSort) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_sort_fun_get_arity(sort: *const BitwuzlaSort) -> u32;
}
extern "C" {
    pub fn bitwuzla_sort_is_equal(sort0: *const BitwuzlaSort, sort1: *const BitwuzlaSort) -> bool;
}
extern "C" {
    pub fn bitwuzla_sort_is_array(sort: *const BitwuzlaSort) -> bool;
}
extern "C" {
    pub fn bitwuzla_sort_is_bv(sort: *const BitwuzlaSort) -> bool;
}
extern "C" {
    pub fn bitwuzla_sort_is_fp(sort: *const BitwuzlaSort) -> bool;
}
extern "C" {
    pub fn bitwuzla_sort_is_fun(sort: *const BitwuzlaSort) -> bool;
}
extern "C" {
    pub fn bitwuzla_sort_is_rm(sort: *const BitwuzlaSort) -> bool;
}
extern "C" {
    pub fn bitwuzla_sort_dump(
        sort: *const BitwuzlaSort,
        format: *const ::std::os::raw::c_char,
        file: *mut FILE,
    );
}
extern "C" {
    pub fn bitwuzla_term_hash(term: *const BitwuzlaTerm) -> size_t;
}
extern "C" {
    pub fn bitwuzla_term_get_kind(term: *const BitwuzlaTerm) -> BitwuzlaKind;
}
extern "C" {
    pub fn bitwuzla_term_get_children(
        term: *const BitwuzlaTerm,
        size: *mut size_t,
    ) -> *mut *const BitwuzlaTerm;
}
extern "C" {
    pub fn bitwuzla_term_get_indices(term: *const BitwuzlaTerm, size: *mut size_t) -> *mut u32;
}
extern "C" {
    pub fn bitwuzla_term_is_indexed(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_get_bitwuzla(term: *const BitwuzlaTerm) -> *mut Bitwuzla;
}
extern "C" {
    pub fn bitwuzla_term_get_sort(term: *const BitwuzlaTerm) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_term_array_get_index_sort(term: *const BitwuzlaTerm) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_term_array_get_element_sort(term: *const BitwuzlaTerm) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_term_fun_get_domain_sorts(
        term: *const BitwuzlaTerm,
        size: *mut size_t,
    ) -> *mut *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_term_fun_get_codomain_sort(term: *const BitwuzlaTerm) -> *const BitwuzlaSort;
}
extern "C" {
    pub fn bitwuzla_term_bv_get_size(term: *const BitwuzlaTerm) -> u32;
}
extern "C" {
    pub fn bitwuzla_term_fp_get_exp_size(term: *const BitwuzlaTerm) -> u32;
}
extern "C" {
    pub fn bitwuzla_term_fp_get_sig_size(term: *const BitwuzlaTerm) -> u32;
}
extern "C" {
    pub fn bitwuzla_term_fun_get_arity(term: *const BitwuzlaTerm) -> u32;
}
extern "C" {
    pub fn bitwuzla_term_get_symbol(term: *const BitwuzlaTerm) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bitwuzla_term_set_symbol(
        term: *const BitwuzlaTerm,
        symbol: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn bitwuzla_term_is_equal_sort(
        term0: *const BitwuzlaTerm,
        term1: *const BitwuzlaTerm,
    ) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_array(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_const(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fun(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_var(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bound_var(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_value(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv_value(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp_value(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm_value(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv_value_zero(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv_value_one(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv_value_ones(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv_value_min_signed(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_bv_value_max_signed(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp_value_pos_zero(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp_value_neg_zero(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp_value_pos_inf(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp_value_neg_inf(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_fp_value_nan(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm_value_rna(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm_value_rne(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm_value_rtn(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm_value_rtp(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_rm_value_rtz(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_is_const_array(term: *const BitwuzlaTerm) -> bool;
}
extern "C" {
    pub fn bitwuzla_term_dump(
        term: *const BitwuzlaTerm,
        format: *const ::std::os::raw::c_char,
        file: *mut FILE,
    );
}
